#!/bin/bash

# Fallback to the second argument if the first is empty
setf() {
  if [ -z "${!1}" ]; then
    export $1="$2"
  fi
}



setf "BACKSTAGE_TITLE" "My Backstage"
setf "BACKSTAGE_ORG" "iocanel"
setf "BACKSTAGE_GITHUB_USER" "iocanel"
setf "BACKSTAGE_GITHUB_TOKEN" ""
setf "BACKSTAGE_TEAM_NAME" "team"

# GitHub OAuth App
setf BACKSTAGE_GITHUB_CLIENT_ID ""
setf BACKSTAGE_GITHUB_CLIENT_SECRET ""

# Kubernetes
setf KUBERNETES_CLUSTER_NAME "default"
setf KUBERNETES_CONFIG_PATH "$HOME/.kube/config"
setf KUBERNETES_API_URL `kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'`
setf KUBERNETES_USER `kubectl config view --minify -o jsonpath='{.users[0].name}'`
setf KUBERNETES_TOKEN `cat $KUBERNETES_CONFIG_PATH | grep -A 2 "name: $KUBERNETES_USER" | grep token | awk '{print $2}'`

# Argo CD
setf ARGOCD_SERVER `pass show env/ARGOCD_SERVER`
setf ARGOCD_USERNAME "admin"
setf ARGOCD_PASSWORD `pass show env/ARGOCD_PASSWORD`
setf ARGOCD_AUTH_TOKEN `pass show env/ARGOCD_AUTH_TOKEN`

#
# Read default values from password store (if available)
# Use the convention of env/NAME where NAME the variable key
#
if [ -x "$(command -v pass)" ]; then
  setf "BACKSTAGE_GITHUB_TOKEN" `pass show env/GITHUB_TOKEN`
  setf BACKSTAGE_GITHUB_CLIENT_ID `pass show env/BACKSTAGE_GITHUB_CLIENT_ID`
  setf BACKSTAGE_GITHUB_CLIENT_SECRET `pass show env/BACKSTAGE_GITHUB_CLIENT_SECRET`
fi

# Display usage
function usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -t, --title <title>                 The title of the Backstage instance"
  echo "  -o, --org <org>                     The organization name"
  echo "  -u, --github-user <github-user>     The GitHub user"
  echo "      --github-token <github-token>   The GitHub token"
  echo "      --github-client-id <client-id>  The GitHub client id"
  echo "      --github-client-secret <secret> The GitHub client secret"
  exit 1
}

#
# Optionally override the default values (above) with command line arguments:
# -t: Title
# -o: Organization
# --github-user: GitHub User
# --github-token: GitHub Token
# --github-client-id: GitHub Client ID
# --github-client-secret: GitHub Client Secret
#
while [[ $# -gt 0 ]]; do
  echo "Processing $1"
  case $1 in
    -t|--title)
      BACKSTAGE_TITLE=$2
      shift 2
      ;;
    -o|--org)
      BACKSTAGE_ORG=$2
      shift 2
      ;;
    -u|--github-user)
      BACKSTAGE_GITHUB_USER=$2
      shift 2
      ;;
    --github-token)
      BACKSTAGE_GITHUB_TOKEN=$2
      shift 2
      ;;
    --github-client-id)
      BACKSTAGE_GITHUB_CLIENT_ID=$2
      shift 2
      ;;
    -github-client-secret)
      BACKSTAGE_GITHUB_CLIENT_SECRET=$2
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      usage
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

echo "BACKSTAGE_TITLE=$BACKSTAGE_TITLE"
echo "BACKSTAGE_ORG=$BACKSTAGE_ORG"
echo "BACKSTAGE_GITHUB_USER=$BACKSTAGE_GITHUB_USER"
echo "BACKSTAGE_GITHUB_TOKEN=$BACKSTAGE_GITHUB_TOKEN"
echo "BACKSTAGE_GITHUB_CLIENT_ID=$BACKSTAGE_GITHUB_CLIENT_ID"
echo "BACKSTAGE_GITHUB_CLIENT_SECRET=$BACKSTAGE_GITHUB_CLIENT_SECRET"
echo "KUBERNETES_API_URL=$KUBERNETES_API_URL"
echo "KUBERNETES_USER=$KUBERNETES_USER"

export BACKSTAGE_TITLE
export BACKSTAGE_ORG
export BACKSTAGE_GITHUB_USER
export BACKSTAGE_GITHUB_TOKEN
export BACKSTAGE_GITHUB_CLIENT_ID
export BACKSTAGE_GITHUB_CLIENT_SECRET
export BACKSTAGE_TEAM_NAME

export KUBERNETES_API_URL
export KUBERNETES_USER

export ARGOCD_SERVER
export ARGOCD_USERNAME
export ARGOCD_PASSWORD
export ARGOCD_AUTH_TOKEN="argocd.token=$ARGOCD_AUTH_TOKEN"
# To use $env in the template without being replaced by envsubst
export env='$env'

#  
# Render the template as app-config.local.yaml that is ignored by git
#
envsubst < app-config.tmpl.yaml > app-config.local.yaml
envsubst < locations/org.tmpl.yaml > locations/org.yaml
